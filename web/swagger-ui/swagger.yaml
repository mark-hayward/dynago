swagger: "2.0"
info:
  version: "1.3.3.7"
  title: "Dynago"
  description: "Dynago API Project"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "NamesAreHard"
  license:
    name: "CDF"
host: "18.202.205.176"
basePath: "/"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
  BasicAuth:
    type: basic

security:
- Bearer: []

paths:
  /encryptTest:
    get:
      description: "Test encryption"
      operationId: "encryptTest"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Authentication Result"
          schema:
            type: "string"
            items:
              $ref: "#/definitions/authSuccess"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /permissions:
    get:
      description: "Get a permission object"
      operationId: "getPermission"
      produces:
      - "application/json"

      responses:
        "200":
          description: "List of permissions on an object"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /table:
    get:
      description: "The list of dynamodb tables"
      operationId: "getTables"
      produces:
      - "application/json"

      responses:
        "200":
          description: "List of Table IDs"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /table/{id}:
    get:
      description: "Get a single table"
      operationId: "getTable"
      produces:
      - "application/json"
      parameters:
      -
        name: "id"
        in: "path"
        description: "ID of table to fetch"
        required: true
        type: "string"
      responses:
        "200":
          description: "Contents of table in a list"
          schema:
            $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /bucket:
    get:
      description: "The list of buckets"
      operationId: "getBuckets"
      produces:
      - "application/json"

      responses:
        "200":
          description: "List of buckets"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /bucket/{id}:
    get:
      description: "Get a single bucket"
      operationId: "getBucket"
      produces:
      - "application/json"

      responses:
        "200":
          description: "Contents of a bucket"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /preview/{bucket}/{key}:
    get:
      description: "Preview start of bucket"
      operationId: "getBucketPreview"
      produces:
      - "application/json"

      responses:
        "200":
          description: "A preview of a bucket"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /status:
    get:
      description: "Get status of the current running job"
      operationId: "getJobStatus"
      produces:
      - "application/json"

      responses:
        "200":
          description: "Job status"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Table"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /process:
    post:
      description: "Send the csv data to DynamoDB"
      operationId: "processJob"
      consumes:
      - "application/json"
      parameters:
        description: "process format"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/process"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"

  /tokens:
    post:
      description: "Log in to get a token from the server"
      operationId: "tokens"
      consumes:
      - "application/json"
      parameters:
        - in: body
          name: credentials
          description: "send login data to backend"
          schema:
            $ref: "#/definitions/loginData"
      produces:
      - "application/json"
      security:
      - basicAuth: []
      responses:
        "200":
          description: "Token"
          schema:
            $ref: "#/definitions/authKey"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/ErrorModel"



definitions:
  Table:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      another:
        type: "string"
  authSuccess:
    type: "string"
  loginData:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  ErrorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  id:
    type: "string"
    pattern: "arn:aws:s3:::[a-z, 0-9, \\-, .]{3,63}$"
  bucket:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      another:
        type: "string"
  key:
    type: "object"
    required:
    - "auth"
    properties:
      auth:
        type: "string"
  authKey:
    type: "object"
    required:
    - "token"
    properties:
      token:
        type: "string"
  process:
    type: "object"
    properties:
      ColumnDefinitions:
        type: "array"
        items:
          $ref: "#/definitions/columnDefinition"
      DynamoConfig:
        type: "object"
        properties:
          TableName:
            type: "string"
          Hash:
            type: "string"
          Sort:
            type: "string"
          MaximumCapacity:
            type: "integer"
            format: "int32"
          MaximumPercentageCapacity:
            type: "integer"
            format: "int32"
          StartCapacity:
            type: "integer"
            format: "int32"
      S3Config:
        type: object
        properties:
          Region:
            type: "string"
          Bucket:
            type: "string"
          Key:
            type: "string"

  columnDefinition:
    type: "object"
    properties:
      ColumnIndex:
        type: "integer"
        format: "int32"
      InsertUUID:
        type: "boolean"
      DynamoColumnName:
        type: "string"
      DynamoDataType:
        type: "string"